// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"
	keycloak "ddm-admin-console/service/keycloak"

	mock "github.com/stretchr/testify/mock"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *ServiceInterface) CreateUser(ctx context.Context, user *keycloak.KeycloakRealmUser) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *keycloak.KeycloakRealmUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, user
func (_m *ServiceInterface) DeleteUser(ctx context.Context, user *keycloak.KeycloakRealmUser) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *keycloak.KeycloakRealmUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUsers provides a mock function with given fields: ctx
func (_m *ServiceInterface) GetUsers(ctx context.Context) ([]keycloak.KeycloakRealmUser, error) {
	ret := _m.Called(ctx)

	var r0 []keycloak.KeycloakRealmUser
	if rf, ok := ret.Get(0).(func(context.Context) []keycloak.KeycloakRealmUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]keycloak.KeycloakRealmUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByRealm provides a mock function with given fields: ctx, realmName
func (_m *ServiceInterface) GetUsersByRealm(ctx context.Context, realmName string) ([]keycloak.KeycloakRealmUser, error) {
	ret := _m.Called(ctx, realmName)

	var r0 []keycloak.KeycloakRealmUser
	if rf, ok := ret.Get(0).(func(context.Context, string) []keycloak.KeycloakRealmUser); ok {
		r0 = rf(ctx, realmName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]keycloak.KeycloakRealmUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, realmName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *ServiceInterface) UpdateUser(ctx context.Context, user *keycloak.KeycloakRealmUser) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *keycloak.KeycloakRealmUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceInterface(t mockConstructorTestingTNewServiceInterface) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
