// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	openshift "ddm-admin-console/service/openshift"

	mock "github.com/stretchr/testify/mock"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// GetInfrastructureCluster provides a mock function with given fields: ctx
func (_m *ServiceInterface) GetInfrastructureCluster(ctx context.Context) (*openshift.ClusterInfrastructure, error) {
	ret := _m.Called(ctx)

	var r0 *openshift.ClusterInfrastructure
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*openshift.ClusterInfrastructure, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *openshift.ClusterInfrastructure); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openshift.ClusterInfrastructure)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMe provides a mock function with given fields: ctx
func (_m *ServiceInterface) GetMe(ctx context.Context) (*openshift.User, error) {
	ret := _m.Called(ctx)

	var r0 *openshift.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*openshift.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *openshift.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openshift.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceInterface(t mockConstructorTestingTNewServiceInterface) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
