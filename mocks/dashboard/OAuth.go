// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// OAuth is an autogenerated mock type for the OAuth type
type OAuth struct {
	mock.Mock
}

// AuthCodeURL provides a mock function with given fields:
func (_m *OAuth) AuthCodeURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTokenClient provides a mock function with given fields: ctx, code
func (_m *OAuth) GetTokenClient(ctx context.Context, code string) (*oauth2.Token, *http.Client, error) {
	ret := _m.Called(ctx, code)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(context.Context, string) *oauth2.Token); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 *http.Client
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Client); ok {
		r1 = rf(ctx, code)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Client)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, code)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewOAuth interface {
	mock.TestingT
	Cleanup(func())
}

// NewOAuth creates a new instance of OAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOAuth(t mockConstructorTestingTNewOAuth) *OAuth {
	mock := &OAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
