// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// KeyManagement is an autogenerated mock type for the KeyManagement type
type KeyManagement struct {
	mock.Mock
}

// AllowedKeysIssuer provides a mock function with given fields:
func (_m *KeyManagement) AllowedKeysIssuer() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// AllowedKeysSerial provides a mock function with given fields:
func (_m *KeyManagement) AllowedKeysSerial() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// EnvVarsSecretName provides a mock function with given fields:
func (_m *KeyManagement) EnvVarsSecretName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FilesSecretName provides a mock function with given fields:
func (_m *KeyManagement) FilesSecretName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// INIConfig provides a mock function with given fields:
func (_m *KeyManagement) INIConfig() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeyDeviceType provides a mock function with given fields:
func (_m *KeyManagement) KeyDeviceType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeysRequired provides a mock function with given fields:
func (_m *KeyManagement) KeysRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoteKeyHost provides a mock function with given fields:
func (_m *KeyManagement) RemoteKeyHost() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteKeyPassword provides a mock function with given fields:
func (_m *KeyManagement) RemoteKeyPassword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteKeyPort provides a mock function with given fields:
func (_m *KeyManagement) RemoteKeyPort() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteSerialNumber provides a mock function with given fields:
func (_m *KeyManagement) RemoteSerialNumber() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteType provides a mock function with given fields:
func (_m *KeyManagement) RemoteType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SignKeyIssuer provides a mock function with given fields:
func (_m *KeyManagement) SignKeyIssuer() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SignKeyPwd provides a mock function with given fields:
func (_m *KeyManagement) SignKeyPwd() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewKeyManagement interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeyManagement creates a new instance of KeyManagement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeyManagement(t mockConstructorTestingTNewKeyManagement) *KeyManagement {
	mock := &KeyManagement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
